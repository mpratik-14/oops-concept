Encapsulation in Python is the process of wrapping up variables and methods into a single entity.
In programming, a class is an example that wraps all the variables and methods defined inside it


#In leymann language   - encapsulation means hiding implementation unlike of inheritance.





#Python code for encapsulation

#Eg
class test:
    def __init__(self, a, b , c):
        self.a = a
        self.b = b
        self.c = c
        
    def __str__(self):
        return "this is the return from my test class"
    
class test1:
    def __init__(self, a, b , c):
        self.a = a
        self.b = b
        self.c = c
        
    def __str__(self):
        return "this is the return from my test1 class "

class test2:
    def __init__(self, a, b , c):
        self.a = a
        self.b = b
        self.c = c
        
    def __str__(self):
        return "this is the return from my test2 class "
    
class final:
    
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
        
    def __str__(self):
        
        return str(self.x) + " " + str(self.y) + " " + str(self.z)

t = test(4,5,6)
t1 = test1(3,4,5)
t2 = test2(5,6,7)
f = final(t,t1,t2)
print(f)
#output - 
this is the return from my test class this is the return from my test1 class  this is the return from my test2 class
